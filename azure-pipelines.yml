trigger:
- main
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  AZURE_FUNCTIONAPP_NAME: 'file-validation-function-app'
  JAVA_VERSION: '11'
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    steps:
    - task: Cache@2
      displayName: 'Cache Maven packages'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - task: JavaToolInstaller@0
      displayName: 'Install Java'
      inputs:
        versionSpec: $(JAVA_VERSION)
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: Maven@3
      displayName: 'Build with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '-B -DskipTests'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'

    - task: Maven@3
      displayName: 'Run Tests'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'

    - task: Maven@3
      displayName: 'Generate Test Coverage'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'jacoco:report'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'Unit Tests'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/site/jacoco/jacoco.xml'
        reportDirectory: '**/site/jacoco'

    - task: ArchiveFiles@2
      displayName: 'Archive Build Artifacts'
      inputs:
        rootFolderOrFile: 'target'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Security
  displayName: 'Security Scan'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Security Analysis'
    steps:
    - task: Cache@2
      displayName: 'Cache Maven packages'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - task: JavaToolInstaller@0
      displayName: 'Install Java'
      inputs:
        versionSpec: $(JAVA_VERSION)
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: Maven@3
      displayName: 'Run OWASP Dependency Check'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'org.owasp:dependency-check-maven:check'
        options: '-B'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Report'
      inputs:
        PathtoPublish: 'target'
        ArtifactName: 'security-report'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: 
  - Build
  - Security
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure Functions'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureFunctionApp@1
            displayName: 'Deploy to Azure Functions'
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: $(AZURE_FUNCTIONAPP_NAME)
              package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - task: AzureCLI@2
            displayName: 'Configure Application Settings'
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az functionapp config appsettings set \
                  --name $(AZURE_FUNCTIONAPP_NAME) \
                  --resource-group your-resource-group \
                  --settings \
                  AZURE_STORAGE_CONNECTION_STRING="$(AZURE_STORAGE_CONNECTION_STRING)" \
                  AZURE_STORAGE_ACCOUNT_NAME="$(AZURE_STORAGE_ACCOUNT_NAME)" \
                  AZURE_SQL_CONNECTION_STRING="$(AZURE_SQL_CONNECTION_STRING)" \
                  AZURE_SQL_USERNAME="$(AZURE_SQL_USERNAME)" \
                  AZURE_SQL_PASSWORD="$(AZURE_SQL_PASSWORD)"

          - task: AzureCLI@2
            displayName: 'Test Deployment'
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Wait for deployment to complete
                sleep 30
                
                # Test health endpoint
                curl -f https://$(AZURE_FUNCTIONAPP_NAME).azurewebsites.net/api/health
                
                echo "Deployment test completed successfully"

- stage: Monitor
  displayName: 'Post-Deployment Monitoring'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Monitor
    displayName: 'Monitor Application'
    steps:
    - task: AzureCLI@2
      displayName: 'Check Application Health'
      inputs:
        azureSubscription: 'Your-Azure-Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Test health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://$(AZURE_FUNCTIONAPP_NAME).azurewebsites.net/api/health)
          
          if [ "$response" = "200" ]; then
            echo "✅ Application is healthy"
          else
            echo "❌ Application health check failed with status: $response"
            exit 1
          fi
          
          # Test statistics endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://$(AZURE_FUNCTIONAPP_NAME).azurewebsites.net/api/statistics)
          
          if [ "$response" = "200" ]; then
            echo "✅ Statistics endpoint is working"
          else
            echo "❌ Statistics endpoint failed with status: $response"
          fi

    - task: AzureCLI@2
      displayName: 'Enable Application Insights'
      inputs:
        azureSubscription: 'Your-Azure-Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Enable Application Insights if not already enabled
          az monitor app-insights component create \
            --app file-validation-app-insights \
            --location eastus \
            --resource-group your-resource-group \
            --application-type web \
            --kind web || echo "Application Insights already exists"

    - task: AzureCLI@2
      displayName: 'Configure Alerts'
      inputs:
        azureSubscription: 'Your-Azure-Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create action group for alerts
          az monitor action-group create \
            --name file-validation-action-group \
            --resource-group your-resource-group \
            --short-name file-validation-ag \
            --action email your-email@example.com your-email@example.com || echo "Action group already exists"
          
          # Create alert for function errors
          az monitor metrics alert create \
            --name function-errors-alert \
            --resource-group your-resource-group \
            --scopes /subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.Web/sites/$(AZURE_FUNCTIONAPP_NAME) \
            --condition "avg Percentage CPU > 80" \
            --description "High CPU usage detected" \
            --window-size 5m \
            --evaluation-frequency 1m || echo "Alert already exists" 